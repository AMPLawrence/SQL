--For this project, I downlaoded a spotify data set from Kaggle.
--Then, I created a table to insert the data into
--Finally, I performed analytics on the data using SQL

--Table creation
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

--After creating the table, I inserted the CSV with the data into the table.

--Then I explored the data with the following questions.

--What is the average rounded song popularity for each artist on the list? List most popular to least popular
SELECT artist_name, ROUND(AVG(popularity)) AS avg_pop
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY avg_pop desc;

--What is the average rounded song tempo and rounded duration for each artist?
SELECT artist_name, ROUND(AVG(tempo)) AS avg_tempo, ROUND(AVG(duration_ms)) AS avg_duration
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY artist_name;

--Who are the 3 most featured artists on the list?
SELECT DISTINCT artist_name, COUNT(artist_name) AS artist_count
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY artist_count desc
LIMIT 3;

--What is the most popular song key?
SELECT DISTINCT song_key, COUNT(song_key) AS key_count
FROM BIT_DB.Spotifydata
GROUP BY song_key
ORDER BY key_count desc
LIMIT 1;

--List the danceability, energy, and tempo of the 5 most popular songs.
SELECT track_name, danceability, energy, tempo
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 5;

--Using a temporary table, list the artists with an average popularity of 90 or higher as top stars.
WITH average_popularity_cte AS(
SELECT s.artist_name, AVG(s.popularity) AS average_popularity
FROM Spotifydata s
GROUP BY s.artist_name
)
SELECT artist_name, average_popularity, 'Top Star' AS tag
FROM average_popularity_cte
WHERE average_popularity>=90;
